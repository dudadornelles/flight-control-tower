<!DOCTYPE HTML>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Flight Control Tower</title>
        <script>
          var d3 = function () { <%=d3=%> }();
        </script>
        <script src='http://code.jquery.com/jquery-2.1.3.min.js'></script>
        <style>
.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

.link.outbound {
  stroke: #0aa;
}

.link.inbound {
  stroke: #aa0;
}

circle {
  stroke: #333;
  stroke-width: 1.5px;
}

circle.component {
  fill: #0ee;
}
circle.event {
  fill: #ee0;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}

#filter {
  position: absolute;
}
        </style>
    </head>

    <body>
      <input id="filter" type="text" />
      <div id="container"></div>
      <script>
var callMap = <%=graph=%>;
var nodes = {};
links = [];

// Compute the distinct nodes from the links.
callMap.forEach(function(call) {
  nodes[call.source] = nodes[call.source] || {name: call.source, type: 'component'};
  nodes[call.target] = nodes[call.target] || {name: call.target, type: 'component'};
  nodes[call.eventName] = nodes[call.eventName] || {name: call.eventName, type: 'event'};

  links.push({
    source: nodes[call.source],
    target: nodes[call.eventName],
    type: 'outbound',
    eventName: call.eventName
  });
  links.push({
    source: nodes[call.eventName],
    target: nodes[call.target],
    type: 'inbound',
    eventName: call.eventName
  });
});

function bodyNewHeight () {
  var bodyElement, bodyMargin;
  bodyElement = $('body');
  bodyMargin = parseInt(bodyElement.css('margin-top').replace('px', '')) +
               parseInt(bodyElement.css('margin-bottom').replace('px', ''));
  return window.innerHeight - bodyMargin;
}

$('body').height(bodyNewHeight());

var width = $('body').width(),
    height = $('body').height();

var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width, height])
    .linkDistance(200)
    .linkStrength(0.05)
    .charge(-700)
    .on("tick", tick)
    .start();

var svg = d3.select("#container").append("svg")
    .attr("width", width)
    .attr("height", height);

// Per-type markers, as they don't inherit styles.
svg.append("defs").selectAll("marker")
    .data(["inbound", "outbound"])
  .enter().append("marker")
    .attr("id", function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("g").selectAll("line")
    .data(force.links())
  .enter().append("line")
    .attr("class", function(d) { return "link " + d.type; })
    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

var circle = svg.append("g").selectAll("circle")
    .data(force.nodes())
  .enter().append("circle")
    .attr("r", 8)
    .attr('class', function(d) { return d.type; })
    .call(force.drag);

var text = svg.append("g").selectAll("text.component")
    .data(force.nodes())
  .enter().append("text")
    .attr("x", 8)
    .attr("y", ".31em")
    .attr("class", "component")
    .style("font-size","13px")
    .text(function(d) { return d.name; });

// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("x1", function(d) { return d.source.x; })
    .attr("y1", function(d) { return d.source.y; })
    .attr("x2", function(d) { return d.target.x; })
    .attr("y2", function(d) { return d.target.y; });
  circle.attr("transform", transform);
  text.attr("transform", transform);
}

function linkArc(d) {
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
}

function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}

$(window).resize(function () {
  var width, height;

  $('body').height(bodyNewHeight());

  force.size([$('body').width(), $('body').height()]).
    resume();
  svg.attr("width", $('body').width())
    .attr("height", $('body').height());
});

$('#filter').on('keyup', function () {
  function visibilityForFilter(element) {
    var filter, linksRelatedToElement;
    filter = RegExp($('#filter')[0].value);

    if (!filter) {
      return 1;
    }

    if (element.target) {
      return filter.exec(element.target.name) || filter.exec(element.source.name) ? 1 : 0;
    } else {
      linksRelatedToElement = links.filter(function (link) {
        return (link.target.name == element.name && filter.exec(link.source.name)) ||
               (filter.exec(link.target.name) && link.source.name == element.name);
      });
      return linksRelatedToElement.length ? 1 :
             filter.exec(element.name) ? 1 : 0;
    }
  }
  d3.selectAll('text').style('opacity', visibilityForFilter);
  d3.selectAll('line').style('opacity', visibilityForFilter);
  d3.selectAll('circle').style('opacity', visibilityForFilter);
});
        </script>
    </body>

</html>



